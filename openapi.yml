openapi: '3.0.2'
info:
  title: simple-twitter
  version: '1.0'
  description: '提供貼文、留言和按讚服務的內容分享平台'

servers:
  - description: '開發伺服器'
    url: http://localhost:3000/api

tags:
  - name: general
    description: 通用
  - name: tweets
    description: 貼文
  - name: users
    description: 個人帳號
  - name: followships
    description: 追蹤
  - name: admin
    description: 管理員

paths:
  # general
  /auth:
    post:
      tags:
        - 'general'
      operationId: authToken
      summary: 一般登入
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_request'
        # required: true
      responses:
        '200':
          description: 授權成功，返回 user info && access token
          headers:
            set-cookie:
              description: jwt=refreshToken 設置在cookie中
              schema:
                type: string
                example: jwt={refresh token}; Max-Age=86400; Path=/; Expires={tomorrow}; HttpOnly; Secure; SameSite=None
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfo_accessToken'
        '400':
          description: 授權失敗
          content:
            application/json:
              schema:
                type: object
                example: { message: '帳號或密碼有誤' }
  /logout:
    get:
      tags:
        - general
      operationId: handleLogout
      summary: 登出
      responses:
        '204':
          description: 登出成功(無法 try it out)
          headers:
            set-cookie:
              description: 清空jwt
              schema:
                type: string
                example: jwt=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Secure; SameSite=None
  /users:
    post:
      tags:
        - general
      operationId: addNewUser
      summary: 註冊帳號
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_request'
      responses:
        '200':
          description: '註冊成功'
        '400':
          description: '請求錯誤'
          content:
            application/json:
              examples:
                duplicateError:
                  summary: 帳號或名稱重複
                  value:
                    message: 帳號或名稱重複
                emptyFieldError:
                  summary: 欄位不能為空
                  value:
                    message: 欄位不能為空
                emailError:
                  summary: 信箱格式有誤
                  value:
                    message: 信箱格式有誤
                checkPasswordError:
                  summary: 確認密碼有誤
                  value:
                    message: 確認密碼有誤
        '507':
          description: '資料庫請求錯誤'
          content:
            application/json:
              schema:
                type: object
                example: { message: 資料庫請求錯誤 }
  /refresh:
    get:
      tags:
        - general
      operationId: getAccessToken
      summary: 刷新 access token
      parameters:
        - in: cookie
          name: jwt
          schema:
            type: string
            default: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiYWxsZW4iLCJ0eXBlIjoicmVmcmVzaCIsImlhdCI6MTY4NTY5NzYyMiwiZXhwIjoxNjg1Nzg0MDIyfQ.cVJne5rcDdZmqd50nJ-te6TsA1UNXhJunZz8Y1qYxHI
          required: true
          description: refresh token(無法 try it out)
      responses:
        '200':
          description: 回傳 access token
          content:
            application/json:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiYWxsZW4iLCJ0eXBlIjoiYWNjZXNzIn0.qgjPY00G3kdMPVpuUVQrLzrcenZCB3LcVom1F8JjsLE
        '401':
          description: refresh token 過期或不存在cookie中
          content:
            application/json:
              schema:
                type: object
                example: { message: '請重新登入' }
  /myInfo:
    get:
      tags:
        - general
      operationId: getMyInfo
      summary: 當前使用者資訊
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 成功獲取個人資訊
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/myInfo'
  # tweets
  /tweets:
    get:
      tags:
        - tweets
      operationId: getAllTweet
      summary: 所有貼文
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 成功獲取貼文資訊、作者資訊、按讚數和留言數
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/tweet'
                    - $ref: '#/components/schemas/tweet'
    post:
      tags:
        - tweets
      operationId: addTweet
      summary: 新增貼文
      security:
        - BearerAuth: []
      requestBody:
        description: 發送貼文請求
        content:
          application/json:
            schema:
              type: object
              example: { description: 'this is new post' }
      responses:
        '200':
          description: 成功發送貼文
        '400':
          description: 請求錯誤
          content:
            application/json:
              examples:
                emptyContentError:
                  summary: 貼文內容為空
                  value:
                    message: 請填入貼文內容
                tooMuchContentError:
                  summary: 貼文內容過長
                  value:
                    message: 貼文內容不得大於140字
        '507':
          description: 資料庫請求錯誤
          content:
            application/json:
              schema:
                type: object
                example: { message: 資料庫請求錯誤 }
  /tweets/{tweet_id}:
    get:
      tags:
        - tweets
      operationId: getTweetById
      summary: 單一貼文
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: tweet_id
          schema:
            type: integer
            default: 2
          required: true
          description: 指定貼文的id
      responses:
        '200':
          description: 成功獲取該貼文的資訊、作者資訊、按讚數和留言
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/tweet'
  /tweets/{tweet_id}/like:
    post:
      tags:
        - tweets
      operationId: likeTweet
      summary: 對貼文按讚
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: tweet_id
          schema:
            type: integer
            default: 2
          required: true
          description: 欲按讚貼文的id
      responses:
        '200':
          description: 成功按讚
        '422':
          description: 按讚失敗，已經對該貼文按過讚了
          content:
            application/json:
              schema:
                type: object
                example: { message: 已經對該貼文按過讚了 }
        '507':
          description: 資料庫請求錯誤
          content:
            application/json:
              schema:
                type: object
                example: { message: 資料庫請求錯誤 }
  /tweets/{tweet_id}/unlike:
    post:
      tags:
        - tweets
      operationId: unlikeTweet
      summary: 對貼文收回讚
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: tweet_id
          schema:
            type: integer
            default: 2
          required: true
          description: 欲收回讚的貼文id
      responses:
        '200':
          description: 成功對貼文收回讚（硬刪除）
        '507':
          description: 資料庫請求錯誤
          content:
            application/json:
              schema:
                type: object
                example: { message: 資料庫請求錯誤 }
  /tweets/{tweet_id}/replies:
    get:
      tags:
        - tweets
      operationId: getAllReplies
      summary: 指定貼文的留言 & 留言者資訊
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: tweet_id
          schema:
            type: integer
            default: 2
          required: true
          description: 欲取得留言的貼文id
      responses:
        '200':
          description: 獲取該貼文的所有留言和留言者資訊
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/reply'
                    - $ref: '#/components/schemas/reply'
    post:
      tags:
        - tweets
      operationId: addReply
      summary: 對指定貼文新增留言
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: tweet_id
          schema:
            type: integer
          required: true
          description: 欲新增留言的貼文id
      requestBody:
        description: 留言內容
        content:
          application/json:
            schema:
              type: object
              example: { comment: 'this is reply content' }
      responses:
        '200':
          description: 成功新增留言
        '400':
          description: 留言內容不能為空
          content:
            application/json:
              examples:
                emptyCommentError:
                  summary: 留言內容為空
                  value:
                    message: 請填入留言內容
                unknownTweetError:
                  summary: 查無該貼文
                  value:
                    message: 留言失敗，查無該貼文
  # users
  /users/{id}:
    get:
      tags:
        - users
      operationId: getUserById
      summary: 指定帳號資訊
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            default: 20
          description: 個人 id
      responses:
        '200':
          description: 成功獲取帳號資訊
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fullUserInfo'
        '400':
          description: 沒有該id的帳號
          content:
            application/json:
              schema:
                type: object
                example: { message: '查無此帳號' }
    put:
      tags:
        - users
      operationId: updateUserById
      summary: 更新帳號資訊
      security:
        - BearerAuth: []
      requestBody:
        description: 修改帳號的請求（待討論）
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/myInfo'
      responses:
        '200':
          description: 成功修改帳號
  /users/{id}/followers:
    get:
      tags:
        - users
      operationId: getUserFollowers
      summary: 指定帳號的粉絲名單
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
            example: 2
          required: true
          description: 帳號 id
      responses:
        '200':
          description: 成功獲取該帳號的粉絲名單
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/follower'
                    - $ref: '#/components/schemas/follower'
  /users/{id}/followings:
    get:
      tags:
        - users
      operationId: getUserFollowings
      summary: 指定帳號的追蹤中名單
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
            example: 2
          required: true
          description: 帳號 id
      responses:
        '200':
          description: 成功獲取該帳號的追蹤中名單
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/following'
                    - $ref: '#/components/schemas/following'
  /users/{id}/likes:
    get:
      tags:
        - users
      operationId: getUserLikes
      summary: 指定帳號的按讚貼文
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
            example: 2
          required: true
          description: 帳號 id
      responses:
        '200':
          description: 成功獲取該帳號喜歡的貼文
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/tweet'
                    - $ref: '#/components/schemas/tweet'
  /users/{id}/replied_tweets:
    get:
      tags:
        - users
      operationId: getUserTweetsReply
      summary: 指定帳號回覆過的貼文
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
            example: 1
          required: true
          description: 帳號 id
      responses:
        '200':
          description: 成功獲取該帳號回覆過的貼文
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/tweet'
                    - $ref: '#/components/schemas/tweet'
  /users/{id}/tweets:
    get:
      tags:
        - users
      operationId: getUserTweets
      summary: 指定帳號的貼文
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
            example: 1
          required: true
          description: 帳號 id
      responses:
        '200':
          description: 成功獲取該帳號的貼文
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/tweet'
                    - $ref: '#/components/schemas/tweet'
  # followships
  /followships:
    post:
      tags:
        - followships
      operationId: makeFollow
      summary: 追蹤指定帳號
      security:
        - BearerAuth: []
      requestBody:
        description: 欲追蹤帳號的 id
        content:
          application/json:
            schema:
              type: object
              example: { id: 2 }
      responses:
        '200':
          description: 成功追蹤指定帳號
        '400':
          description: 查無該帳號
          content:
            application/json:
              schema:
                type: object
                example: { message: '追蹤失敗，該帳號不存在' }
  /followships/{following_id}:
    delete:
      tags:
        - followships
      operationId: unFollow
      summary: 取消追蹤指定帳號
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: following_id
          schema:
            type: integer
            example: 1
          required: true
          description: 帳號 id
      responses:
        '200':
          description: 成功取消追蹤指定帳號
  /admin/users:
    get:
      tags:
        - admin
      operationId: getAllUser
      summary: 獲取所有帳號資訊
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 成功獲取所有使用者資訊
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/fullUserInfo'
                    - $ref: '#/components/schemas/fullUserInfo'
  /admin/tweets/{tweet_id}:
    delete:
      tags:
        - admin
      operationId: deleteTweet
      summary: 刪除指定貼文
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: tweet_id
          schema:
            type: integer
            example: 1
          required: true
          description: 貼文 id
      responses:
        '200':
          description: 成功刪除指定貼文
        '400':
          description: 查無該貼文
          content:
            application/json:
              schema:
                type: object
                example: { message: '刪除失敗，查無該貼文' }

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'access token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoidXNlcjEiLCJ0eXBlIjoiYWNjZXNzIn0.j2QXHeg2HFQNMcmmTeuZjrjSxPe8whGsqrMBjGRz0xg'

  schemas:
    login_request:
      properties:
        account:
          type: string
          description: 使用者帳號
          example: 'user1'
        password:
          type: string
          description: 使用者密碼
          example: '12345678'
      required:
        - account
        - password

    myInfo:
      properties:
        id:
          type: integer
          example: 1
        account:
          type: string
          example: user1
        name:
          type: string
          example: user1
        email:
          type: string
          example: user1@example.com
        role:
          type: string
          example: user
        avatar:
          type: string
          example: null

    userInfo_accessToken:
      allOf:
        - $ref: '#/components/schemas/myInfo'
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiYWxsZW4iLCJ0eXBlIjoiYWNjZXNzIiwiaWF0IjoxNjg1NTAzMDk5LCJleHAiOjE2ODU1MDMxMjl9.X1rEj_khoG1k6L0UxkhHa81wm2kHJ8hoVXcQwgRJ04w

    register_request:
      properties:
        account:
          type: string
          example: 'user1'
        name:
          type: string
          example: 'user1'
        email:
          type: string
          example: 'user1@example.com'
        password:
          type: string
          example: '12345678'
        checkPassword:
          type: string
          example: '12345678'
      required:
        - account
        - name
        - email
        - password
        - checkPassword

    tweet:
      properties:
        id:
          type: integer
          example: 2
        description:
          type: string
          example: this is description of tweet
        createdAt:
          type: string
          example: '2023-05-31T03:00:07.000Z'
        updatedAt:
          type: string
          example: '2023-05-31T03:00:07.000Z'
        replyCount:
          type: integer
          example: 1
        likeCount:
          type: integer
          example: 1
        User:
          type: object
          $ref: '#/components/schemas/userInfo'

    userInfo:
      properties:
        id:
          type: integer
          example: 20
        account:
          type: string
          example: user1
        name:
          type: string
          example: 12345678
        avatar:
          type: string
          example: null

    reply:
      properties:
        id:
          type: integer
          example: 3
        TweetId:
          type: integer
          example: 1
        comment:
          type: string
          example: this is test comment
        createdAt:
          type: string
          example: '2023-06-01T13:30:00.000Z'
        User:
          type: object
          $ref: '#/components/schemas/userInfo'

    fullUserInfo:
      allOf:
        - $ref: '#/components/schemas/userInfo'
      properties:
        email:
          type: string
          example: user1@example.com
        role:
          type: string
          example: 'user'
        introduction:
          type: string
          example: introduction of user

    follower:
      properties:
        followerId:
          type: integer
          example: 2
        Followers.account:
          type: string
          example: 'user1'
        Followers.name:
          type: string
          example: 'user1'
        Followers.avatar:
          type: string
          example: null

    following:
      properties:
        followingId:
          type: integer
          example: 2
        Followings.account:
          type: string
          example: 'user1'
        Followings.name:
          type: string
          example: 'user1'
        Followings.avatar:
          type: string
          example: null

    likeTweet:
      properties:
        id:
          type: integer
          example: 4
        TweetId:
          type: integer
          example: 2
        TweetI.description:
          type: string
          example: this is description of tweet
        Tweet.User.id:
          type: integer
          example: 2
        Tweet.User.account:
          type: string
          example: user1
        Tweet.User.name:
          type: string
          example: user1
        Tweet.User.avatar:
          type: string
          example: null
